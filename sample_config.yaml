
dataset_metric: #list of dataset-metric pairs, each as a two-item list of strings ["dataset_name", "metric_name"] - you must only run one dataset with one metric(no repeat datasets)
  # Speech recognition datasets
  - ["alpaca_audio_test", "llm_judge_detailed"]
  - ["librispeech_test_clean", "word_error_rate"]
  
  # Emotion recognition runspec
  - ["emotion_recognition", "llm_judge_binary"]
  
  # Gender recognition datasets
  - ["voxceleb_gender_test", "llm_judge_binary"]
  - ["iemocap_gender_recognition", "llm_judge_binary"]
  
  # Question-answering datasets and runspecs
  - ["big_bench_audio", "llm_judge_big_bench_audio"]
  - ["music_understanding", "llm_judge_binary"]

# Optional: Aggregate multiple dataset-metric pairs into a single score
# aggregate has x two-item lists, each as a two-item list of strings ["metric_name", ["dataset/runspec1", "dataset2", ..., "datasetN"]]
aggregate:
  - ["llm_judge_binary", ["emotion_recognition"]]
  - ["llm_judge_binary", ["voxceleb_gender_test", "iemocap_gender_recognition"]]

filters:
  num_samples: 100 #number of samples to run(remove for all)
  user_prompt_add_ons: ["asr_clean_output"] #optional - additional prompting in text instructions for each sample
  system_prompts: ["audio_expert", "try_best"]
  length_filter: [1.0, 3.0] #optional - filters for only audio samples in this length(seconds) - only supported for general and callhome preprocessors
  accented: false #optional - filters for only audio samples in this length(seconds)
  language: "en" #optional - filters for only audio samples in this language

judge_properties:
  judge_concurrency: 8 #judge call(optional)
  judge_model: "gpt-4o-mini" #optional
  judge_type: "openai" # mandatory (vllm or openai)
  judge_api_version: "${API_VERSION}" # optional(needed for openai)
  judge_api_endpoint: "${ENDPOINT_URL}" # mandatory
  judge_api_key: "${AUTH_TOKEN}" # mandatory
  judge_temperature: 0.1 # optional
  judge_prompt_model_override: "gpt-4o-mini-enhanced" # optional

logging:
  log_file: "audiobench.log"  # Path to the main log file

#override the requester temperature values by task or model
temperature_overrides:
  #model and task override
  - model: "gpt-4o-mini-audio-preview"
    task: "emotion_recognition"
    temperature: 0.9
  #model only override
  - model: "gpt-4o-mini-audio-preview"
    temperature: 0.3
  #task only override
  - task: "ASR"
    temperature: 0.5

models:
  - info:
      name: "gpt-4o-mini-audio-preview-1" 
      inference_type: "openai" # mandatory - you can use vllm or openai chat completion
      url: "${ENDPOINT_URL}" - # mandatory - endpoint url
      delay: 100
      retry_attempts: 8
      timeout: 30
      model: "gpt-4o-mini-audio-preview" # mandatory - only needed for vllm
      auth_token: "${AUTH_TOKEN}" 
      api_version: "${API_VERSION}"
      batch_size: 100 # Optional - batch eval size
      chunk_size: 30 # Optional - max audio length in seconds fed to model
  - info:
      name: "gpt-4o-mini-audio-preview-2" 
      inference_type: "openai" # mandatory - you can use vllm or openai chat completion
      url: "${ENDPOINT_URL}" - # mandatory - endpoint url
      delay: 100
      retry_attempts: 8
      timeout: 30
      model: "gpt-4o-mini-audio-preview" # mandatory - only needed for vllm
      auth_token: "${AUTH_TOKEN}" 
      api_version: "${API_VERSION}"
      batch_size: 100 # Optional - batch eval size
      chunk_size: 30 # Optional - max audio length in seconds fed to model
  - info:
      name: "qwen-2.5-omni" 
      inference_type: "vllm" # mandatory - you can use vllm or openai chat completion
      url: "${ENDPOINT_URL}" - # mandatory - endpoint url
      delay: 100
      retry_attempts: 8
      timeout: 30
      model: "qwen-2.5-omni" # mandatory - only needed for vllm
      auth_token: "${AUTH_TOKEN}" 
      batch_size: 4 # Optional - batch eval size
      chunk_size: 40 # Optional - max audio length in seconds fed to model

      # Data sharding - If two models have same "model" attribute, we implement dataset sharding

# In command line you can also pass custom config file name to read from with bash evaluate.sh --config <config_file>
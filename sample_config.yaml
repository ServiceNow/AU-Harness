
dataset_metric: #tuple of dataset, metric(can run by task or dataset)
  - "(wavcaps_qa_test, word_error_rate)"
  - "(alpaca_audio_test, word_error_rate)"
  - "(emotion_recognition, llm_judge_binary)"
num_samples: 100 #number of samples to run(remove for all)
judge_concurrency: 8 #judge call(optional)
judge_model: "gpt-4o-mini" #optional(only supported model right no2)
user_prompt_add_ons: ["asr_clean_output"] #optional - additional prompting in text instructions for each sample
system_prompts: ["audio_expert", "MCQ_expert"] #optional - additional prompting in text instructions for each sample
length_filter: [1.0, 3.0] #optional - filters for only audio samples in this length(seconds)
accented: false #optional - filters for only audio samples in this length(seconds)
language: "english" #optional - filters for only audio samples in this language
logging:
  log_file: "audiobench.log"  # Path to the main log file
  level: "INFO"    # Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)

# Optional temperature overrides by model and task
temperature_overrides:
  - model: "qwen-2-audio"
    task: "ASR"
    temperature: 0.9
  - model: "gpt-4o-mini-audio-preview"
    task: "emotion_recognition"
    temperature: 0.3

models:
  - info:
      name: "gpt-4o-mini-audio-preview-1" 
      inference_type: "openai" #you can use vllm, openai, (chat completion) or audio transcription endpoint
      url: "${ENDPOINT_URL}" - #endpoint url
      delay: 100
      retry_attempts: 8
      timeout: 30
      model: "gpt-4o-mini-audio-preview" #only needed for vllm
      auth_token: "${AUTH_TOKEN}" 
      api_version: "${API_VERSION}"
      batch_size: 100 #batch eval size
      chunk_size: 45 #max audio length in seconds fed to model
  - info:
      name: "gpt-4o-mini-audio-preview-2" 
      inference_type: "openai" #you can use vllm, openai, (chat completion) or audio transcription endpoint
      url: "${ENDPOINT_URL}" - #endpoint url
      delay: 100
      retry_attempts: 8
      timeout: 30
      model: "gpt-4o-mini-audio-preview" #only needed for vllm
      auth_token: "${AUTH_TOKEN}" 
      api_version: "${API_VERSION}"
      batch_size: 100 #batch eval size
      chunk_size: 45 #max audio length in seconds fed to model
  - info:
      name: "qwen-2.5-omni" 
      inference_type: "vllm" #you can use vllm, openai, (chat completion) or audio transcription endpoint
      url: "${ENDPOINT_URL}" - #endpoint url
      delay: 100
      retry_attempts: 8
      timeout: 30
      model: "qwen-2.5-omni" #only needed for vllm
      auth_token: "${AUTH_TOKEN}" 
      batch_size: 4 #batch eval size
      chunk_size: 45 #max audio length in seconds fed to model

      #If two models have same "model" attribute, we implement dataset sharding

#In command line you can also pass custom config file name to read from with bash evaluate.sh --config <config_file>